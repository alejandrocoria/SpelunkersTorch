plugins {
    id 'multiloader-loader'
    id 'net.neoforged.moddev'
    id 'net.darkhax.curseforgegradle' version '1.+'
    id "com.modrinth.minotaur" version "2.+"
}

jar.archiveClassifier = 'neoforge'

neoForge {
    version = neoforge_version
    // Automatically enable neoforge AccessTransformers if the file exists
    def at = project(':common').file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers.add(at.absolutePath)
    }
    parchment {
        minecraftVersion = parchment_minecraft
        mappingsVersion = parchment_version
    }
    runs {
        configureEach {
            systemProperty('neoforge.enabledGameTestNamespaces', mod_id)
            ideName = "NeoForge ${it.name.capitalize()} (${project.path})" // Unify the run config names with fabric
        }
        client {
            client()
            gameDirectory = project.file('run/client')
        }
        data {
            data()
            gameDirectory = project.file('run/data')
        }
        server {
            server()
            gameDirectory = project.file('run/server')
        }
    }
    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

jar {
    dependsOn "processDocs"
}

task processDocs(type: Copy) {
    // update docs
    from(file("../doc/")) {
        include '*.md'
        expand 'loaderversion': project.neoforge_version,
                'loadername': "Neoforge"
    }
    into 'build/doc'
}

if (!project.hasProperty("curseForgeApiKey")) {
    ext.curseForgeApiKey = project.findProperty("curseforge_api_key") ?: "notset"
}
if (!project.hasProperty("modrinthApiKey")) {
    ext.modrinthApiKey = project.findProperty("modrinth_api_key") ?: "notset"
}

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    apiToken = "${curseForgeApiKey}"
    def mainFile = upload(curseforge_project_id, jar)
    mainFile.displayName = "${mod_name}-${minecraft_version}-${version}-neoforge"
    mainFile.releaseType = release_type
    mainFile.addModLoader("NeoForge")
    mainFile.addJavaVersion("Java 21")
    mainFile.addGameVersion("${project.minecraft_version}")
    mainFile.addEnvironment("Server", "Client")
    mainFile.changelogType = "markdown"
    mainFile.changelog = file("$project.buildDir/doc/changelog.md")
}

tasks.modrinth.dependsOn(tasks.build)

modrinth {
//    debugMode.set(true)
    token = "${modrinthApiKey}"
    projectId = modrinth_project_id
    versionNumber = "${minecraft_version}-${version}-neoforge"
    versionName = "${mod_name}-${minecraft_version}-${version}-neoforge"
    versionType = release_type
    uploadFile = jar
    gameVersions = ["${project.minecraft_version}"]
    loaders = ["neoforge"]
    changelog = file("$project.buildDir/doc/changelog.md").exists() ? file("$project.buildDir/doc/changelog.md").text : null
}

project.afterEvaluate {
    project.tasks.findAll { task -> (task.name.startsWith('curseforge') || task.name.startsWith('modrinth'))
    }.each {
        projectTask -> projectTask.dependsOn build
    }
}
